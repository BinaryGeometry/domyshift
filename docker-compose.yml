services:
  web:
    build: ./server
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./server/:/usr/src/app/
    ports:
      - 8000:8000
    env_file:
      - ./server/.env.dev
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=hello_django
      - POSTGRES_PASSWORD=hello_django
      - POSTGRES_DB=hello_django_dev

volumes:
  postgres_data:
  
# services:
#     djangoapp:
#       container_name: djangoapp
#       build: ./restapi
#       ports:
#         - "8000:8000"
#       environment:
#         - PG_USER=postgres
#         - PG_PASSWORD=postgres
#         - PG_DB=postgres
#         - PG_PORT=5432
#         - PG_HOST=db
#       depends_on:
#         - db
#       # command: >
#         # sh -c
#       networks:
#       - mars
#     db:
#       container_name: db
#       image: postgres:12
#       environment:
#         - POSTGRES_DB=postgres
#         - POSTGRES_USER=postgres
#         - POSTGRES_PASSWORD=postgres
#       ports:
#         - "5432:5432"
#       volumes:
#         - pgdata:/var/lib/postgresql/data
#       networks:
#       - mars
# volumes:
#   pgdata: {}
# networks:
#   mars:
#     name: mars
#     driver: bridge

# version: '3.7'

# services: # the different images that will be running as containers
#   nginx: # service name
#     build: ./nginx # location of the dockerfile that defines the nginx image. The dockerfile will be used to spin up an image during the build stage.
#     ports: 
#       - 1339:80 # map the machine port 1339 to the container port 80. Any traffic from 1339 externally will be passed to port 80 of the NGINX container. You can access this container viea localhost:1339
#     volumes:  
#       - static_volume:/home/app/microservice/static # static storages provisioned since django does not handle static files in production
#     depends_on: 
#       - web # will only start if web is up and running
#     restart: "on-failure" # restart service when it fails
#   web: # service name
#     build: .restapi #build the image for the web service from the dockerfile in parent directory.  
#     command: sh -c "python manage.py makemigrations &&
#                     python manage.py migrate &&
#                     gunicorn microservice_sample_app.wsgi:application --bind 0.0.0.0:${APP_PORT}" # command directive passes the parameters to the service and they will be executed by the service. In this example, these are django commands which will be executed in the container where django lives.
#     volumes: 
#       - .:/microservice # map data and files from parent directory in host to microservice directory in docker container
#       - static_volume:/home/app/microservice/static # file where env variables are stored. Used as best practice so as not to expose secret keys
#     env_file: 
#       - ./restapi/.env # name of the env file
#     image: domyshift:restapi # name of the image
#     expose: # expose the port to other services defined here so that they can access this service via the exposed port. In the case of Django, this is 8000 by default
#       - ${APP_PORT} # retrieved from the .env file
#     restart: "on-failure"

#     depends_on: 
#       - db # cannot start if db service is not up and running
#   db: # service name
#     image: postgres:11-alpine # image name of the postgres database. during build, this will be pulled from dockerhub and a container spun up from it.
#     volumes:
#       - ./init.sql:/docker-entrypoint-initdb.d/init.sql
#       - postgres_data:/var/lib/postgresql/data/
#     environment: # access credentials from the .env file
#       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#       - POSTGRES_DB=${DB_NAME}
#       - PGPORT=${DB_PORT}
#       - POSTGRES_USER=${POSTGRES_USER}
#     restart: "on-failure"
#     depends_on: # can only start if web service is running
#       - nginx
      
# volumes:
#   postgres_data:
#   static_volume:
  # rabbitmq:
  # rabbitmq_logs:

# version: "3"
# services:
  # domyshift-db:
  #   container_name: domyshift-db
  #   image: postgres
  #   environment:
  #     PGUSER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     PGDATA: /data/postgres
  #   volumes:
  #     - ./pgdata:/var/lib/postgresql/data
#   domyshift-restapi:
#     container_name: "domyshift-restapi"
#     image: domyshift:api
#     build: ./restapi
#     command: python manage.py runserver 127.0.0.1:7000
#     volumes:
#       - ./restapi:/code
#     ports:
#       - "80:7000"
#     # depends_on:
#     #   - domyshift-db
#     environment:
#       - DJANGO_SETTINGS=dev
# volumes:
#   pgdata:

  # domyshift-client:
  #   container_name: "domyshift-client"
  #   image: domyshift:client
  #   build: ./client
  # nginx:
  #     image: nginx
  #     container_name: 'nginx'
  #     depends_on:
  #       - frontend
  #       - backend
  #     links:
  #       - backend
  #     volumes:
  #       - shared:/usr/share/nginx/html
  #       - ./nginx.conf:/etc/nginx/nginx.conf
  #     ports:
  #       - "8080:80"

  # backend:
  #   build:
  #     context: ./backend
  #   container_name: "backend"
  #   ports:
  #     - "8081:8081"
  #   depends_on:
  #     - db
  #   links:
  #     - db
  # db:
  #   image: mongo
  #   container_name: "mongodb"
  #   volumes:
  #       - ./docker-entrypoint.sh:/entrypoint.sh
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: admin
  #     MONGO_INITDB_DATABASE: db
  #     MONGO_INITDB_COLLECTION: board
  #   ports:
  #     - "27017:27017"
  #   command: mongod --auth
